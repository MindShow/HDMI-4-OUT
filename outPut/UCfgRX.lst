C51 COMPILER V9.51   UCFGRX                                                                05/29/2013 17:36:16 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE UCFGRX
OBJECT MODULE PLACED IN .\outPut\UCfgRX.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE sii9135\UCfgRX.c LARGE BROWSE INCDIR(.\app;.\bsp;.\sii9135) DEBUG OBJECTEXT
                    -END PRINT(.\outPut\UCfgRX.lst) TABS(2) PREPRINT(.\outPut\UCfgRX.i) OBJECT(.\outPut\UCfgRX.obj)

line level    source

   1          //------------------------------------------------------------------------------
   2          // Module Name: UCfgRX
   3          //
   4          // Module Description:  Intit Users EEPROM, intit RX with API setting written into EEPROM
   5          //
   6          //
   7          // Copyright © 2002-2005, Silicon Image, Inc.  All rights reserved.
   8          //
   9          // No part of this work may be reproduced, modified, distributed, transmitted,
  10          // transcribed, or translated into any language or computer format, in any form
  11          // or by any means without written permission of: Silicon Image, Inc.,
  12          // 1060 East Arques Avenue, Sunnyvale, California 94085
  13          //------------------------------------------------------------------------------
  14          #include <stdio.h>
  15          
  16          #include "UCfgRX.h"
  17          #include "UEEPROM.h"
  18          #include "SiIRX_API.h"
  19          #include "SiIRXAPIDefs.h"
  20          
  21          #include "SiIVidIn.h"
  22          
  23          //------------------------------------------------------------------------------
  24          // Function Name: siiGetPCB_Id()
  25          // Function Description:  this function reads Board Id from EEPROM
  26          //
  27          // Accepts: none
  28          // Returns: BYTE, Board Id
  29          // Globals: none
  30          //------------------------------------------------------------------------------
  31          BYTE siiGetPCB_Id( void ){
  32   1      BYTE bData;
  33   1      
  34   1          siiBlockReadEEPROM ( SII_PCB_ID_ADDR, 1 , &bData );
  35   1        return bData;
  36   1      }
  37          //------------------------------------------------------------------------------
  38          // Function Name: InitEEPROMWithDefaults
  39          // Function Description:
  40          //------------------------------------------------------------------------------
  41          void InitEEPROMWithDefaults( void ){
  42   1      BYTE abData[5];
  43   1      
  44   1          abData[0] = RX_API_ID_L;
  45   1          abData[1] = RX_API_ID_H;
  46   1          siiBlockWriteEEPROM ( SII_EEPROM_ID_ADDR , 2, abData);    // write EEPROM ID
  47   1          abData[0] = SiI_CP9125;
  48   1      //    abData[0] = SiI_CP9135;
  49   1      
  50   1          siiBlockWriteEEPROM ( SII_PCB_ID_ADDR , 1, abData);    // write PCB ID
  51   1      
  52   1      //YMA       HBR         DSD       PCM
  53   1          abData[0] = MClock_256Fs<<4 | MClock_512Fs<<2 | MClock_256Fs | SiI_RX_InvertOutputVidClock;
  54   1          abData[1] = SiI_RX_CD_24BPP;
C51 COMPILER V9.51   UCFGRX                                                                05/29/2013 17:36:16 PAGE 2   

  55   1          siiBlockWriteEEPROM ( SII_RX_INIT_SYS_ADDR ,2 , abData);
  56   1      
  57   1          abData[0] = SiI_RX_VInCh1;
  58   1          siiBlockWriteEEPROM ( SII_RX_VIDEO_INPUT ,1 , abData);
  59   1      
  60   1          abData[0] = SiI_RX_P_RGB;
  61   1          abData[1] = SiI_RX_SS_SeparateSync;
  62   1          abData[2] = SiI_RX_SC_NoInv;
  63   1          abData[3] = SiI_RX_AVC_NoPedestal;
  64   1          siiBlockWriteEEPROM ( SII_RX_VIDEO_OUTPUT_F ,4 , abData);
  65   1      
  66   1          abData[0] = (BYTE)( SiI_RX_AOut_Default & 0xFF );
  67   1          abData[1] = (BYTE)( ( SiI_RX_AOut_Default >> 8 ) & 0xFF );
  68   1          abData[2] = (BYTE)( SiI_RX_AOut_I2S_I2SDefault & 0xFF );
  69   1          abData[3] = (BYTE)(( SiI_RX_AOut_I2S_I2SDefault >> 8 ) & 0xFF );
  70   1          abData[4] = 0x00;
  71   1        abData[5] = 0x22;//YMA 2 added default value for DSDHBR format
  72   1          siiBlockWriteEEPROM ( SII_RX_AUDIO_OUTPUT_F, 6 , abData); //YMA 2 change 5 -> 6
  73   1      
  74   1      }
  75          
  76          //------------------------------------------------------------------------------
  77          // Function Name: InitTX
  78          // Function Description:  this functio takes TX out of Power Down mode
  79          //------------------------------------------------------------------------------
  80          static void InitTX ( BYTE bBoardID ){
  81   1      
  82   1         
  83   1          
  84   1          if ( bBoardID == SiI_CP9000 ) {
  85   2              hlWriteByte_8BA( 0x72, 0x08, 0x35 );
  86   2          }
  87   1          else if (( bBoardID == SiI_FPGA_IP11 )||( bBoardID == SiI_CP9135|| bBoardID ==  SiI_CP9125)||( bBoardI
             -D == SiI_CP9133)) {
  88   2      
  89   2         printf("InitTX\n");
  90   2              hlWriteByte_8BA(0x70, 0x08, 0x37);
  91   2              hlWriteByte_8BA(0x70, 0x09, 0x11);
  92   2          }
  93   1          
  94   1      }
  95          //------------------------------------------------------------------------------
  96          // Function Name: PrintMasterClock
  97          // Function Description:  This function prints output master clock
  98          //------------------------------------------------------------------------------
  99          static void PrintMasterClock( BYTE bMasterClock ){
 100   1      
 101   1          switch ( bMasterClock ){
 102   2              case MClock_128Fs: printf ("128 * Fs"); break;
 103   2              case MClock_256Fs: printf ("256 * Fs"); break;
 104   2              case MClock_384Fs: printf ("384 * Fs"); break;
 105   2              case MClock_512Fs: printf ("512 * Fs"); break;
 106   2          }
 107   1      }
 108          //------------------------------------------------------------------------------
 109          // Function Name: PrintOutputClorDepth
 110          // Function Description:  This function prints output color depth
 111          //------------------------------------------------------------------------------
 112          static void PrintOutputColorDepth( BYTE bOutColorDepth ){
 113   1      
 114   1          switch ( bOutColorDepth ){
 115   2              case SiI_RX_CD_24BPP: printf ("24 bit per pixel"); break;
C51 COMPILER V9.51   UCFGRX                                                                05/29/2013 17:36:16 PAGE 3   

 116   2              case SiI_RX_CD_30BPP: printf ("30 bit per pixel"); break;
 117   2              case SiI_RX_CD_36BPP: printf ("36 bit per pixel"); break;
 118   2          }
 119   1      }
 120          //------------------------------------------------------------------------------
 121          // Function Name: PrintIntilizeSystemWith
 122          // Function Description:  This function prints out parameters of intilization RX API instance
 123          //------------------------------------------------------------------------------
 124          static void PrintIntilizeSystemWith( BYTE * pbInitData ){
 125   1      
 126   1          printf ("\n RX API intance intilized with:");
 127   1          printf ("\nPCM Master Clock output: " );
 128   1          PrintMasterClock( pbInitData[0] & 0x03 );
 129   1          printf ("\nDSD Master Clock output: " );
 130   1          PrintMasterClock( (pbInitData[0] >> 2) & 0x03 );
 131   1          printf ("\nHBR Master Clock output: " );
 132   1          PrintMasterClock( (pbInitData[0] >> 4) & 0x03 );
 133   1          printf ("\nFPGA support: ");
 134   1          if ( pbInitData[0] & SiI_RX_FPGA )
 135   1              printf ("yes");
 136   1          else
 137   1              printf ("no");
 138   1          printf ("\nVideo Output clock:");
 139   1          if ( pbInitData[0] & SiI_RX_InvertOutputVidClock )
 140   1              printf ("yes");
 141   1          else
 142   1              printf ("no");
 143   1          printf ("\nOutput Color Depth: ");
 144   1          PrintOutputColorDepth ( pbInitData[1] & 0x03 );
 145   1      }
 146          
 147          //------------------------------------------------------------------------------
 148          // Function Name: siiRXAPIConfig
 149          // Function Description:
 150          //
 151          //------------------------------------------------------------------------------
 152          static BYTE siiRXAPIConfig( void ){
 153   1      BYTE abData[6];
 154   1      BYTE bError;
 155   1      WORD wDevId;
 156   1      
 157   1          siiBlockReadEEPROM ( SII_RX_INIT_SYS_ADDR ,2 , abData);
 158   1      
 159   1          bError = SiI_RX_InitializeSystem( abData );
 160   1      
 161   1          if ( ! ( bError & SiI_EC_Mask) ) {
 162   2      //VG added for printout system config
 163   2          PrintIntilizeSystemWith( abData );
 164   2      
 165   2              SiI_RX_GetAPI_Info( abData );
 166   2              wDevId = abData[4] | ( abData[5] << 8 );
 167   2      
 168   2        siiBlockReadEEPROM ( SII_RX_VIDEO_INPUT ,1 , abData);
 169   2      
 170   2              if ( wDevId == SiI9011 ) {
 171   3                  abData[0] = SiI_RX_VInCh1;
 172   3              }
 173   2      
 174   2      //YMA added to avoid reinit system again in the SetVideoInput() at start up.
 175   2      // not need to reinitialize the system as the changing channel should do
 176   2      //  bError = SiI_RX_SetVideoInput( abData[0] );
 177   2      SiI_Ctrl.bVidInChannel = abData[0]; 
C51 COMPILER V9.51   UCFGRX                                                                05/29/2013 17:36:16 PAGE 4   

 178   2      bError = siiInitVideoInput(SiI_Ctrl.bVidInChannel);
 179   2      //YMA end of modify
 180   2      
 181   2              if ( !(bError & SiI_EC_Mask) ) {
 182   3                  siiBlockReadEEPROM ( SII_RX_VIDEO_OUTPUT_F ,4 , abData);
 183   3                  if ( ( wDevId == SiI9011 ) || ( wDevId == SiI9023 ) || ( wDevId == SiI9033 ) || 
 184   3                         (SiI_Ctrl.bDevId == RX_SiI9133 )|| (SiI_Ctrl.bDevId == RX_SiI9135||SiI_Ctrl.bDevId == R
             -X_SiI9125 )
 185   3               || ( SiI_Ctrl.bDevId == RX_SiIIP11 ) ) {
 186   4                      abData[3] = SiI_RX_AVC_Digital_Output; // set video digital output because no analog      
             -                                                     // video output suuport
 187   4                  }
 188   3                  bError = SiI_RX_SetVideoOutputFormat ( abData[0],
 189   3                                                         abData[1],
 190   3                                                         abData[2],
 191   3                                                         abData[3]
 192   3                                                       );
 193   3                  if (  !(bError & SiI_EC_Mask) ) {
 194   4      //                siiBlockReadEEPROM ( SII_RX_AUDIO_OUTPUT_F ,5 , abData);   //0x30
 195   4                      siiBlockReadEEPROM ( SII_RX_AUDIO_OUTPUT_F ,6 , abData);   //YMA 2 added DSDHBR format byt
             -e
 196   4                      bError = SiI_RX_SetAudioOutputFormat ( (WORD) ( abData[0] | (abData[1] << 8)),
 197   4                                                             (WORD) ( abData[2] | (abData[3] << 8)),
 198   4                                                                      abData[4], abData[5]//YMA 2 added DSDHBR f
             -ormat byte
 199   4                                                           );
 200   4      
 201   4                  }
 202   3              }
 203   2          }
 204   1          return ( bError  & SiI_EC_Mask) ;
 205   1      
 206   1      }
 207          //------------------------------------------------------------------------------
 208          // Function Name: siiResoreSavedRXConfiguration
 209          // Function Description:
 210          //
 211          // Accepts: none
 212          // Returns: none
 213          // Globals: none
 214          //------------------------------------------------------------------------------
 215          BYTE siiRXConfig( void ){
 216   1      BYTE abData[2];
 217   1      BYTE bError;
 218   1      
 219   1      
 220   1          printf ( " \n Init application...\n" );
 221   1      
 222   1          bError = siiFindEEPROM();
 223   1          if ( !bError ) {
 224   2      
 225   2              bError = siiBlockReadEEPROM ( SII_EEPROM_ID_ADDR, 2 , abData );
 226   2              if( !bError ) {
 227   3                  printf ( "\n Get EEPROM settings\n" );
 228   3                  if( ( abData[0] != RX_API_ID_L ) || ( abData[1] != RX_API_ID_H )){
 229   4                      InitEEPROMWithDefaults();
 230   4                  }
 231   3                  bError = siiRXAPIConfig();
 232   3      
 233   3                  if( !bError  ) {
 234   4                      siiBlockReadEEPROM ( SII_PCB_ID_ADDR , 1, abData);    // write PCB ID
 235   4                      if ( ( abData[0] == SiI_CP9000 ) || ( abData[0] == SiI_FPGA_IP11 ) ) 
C51 COMPILER V9.51   UCFGRX                                                                05/29/2013 17:36:16 PAGE 5   

 236   4                          InitTX( abData[0] );
 237   4                  }
 238   3              }
 239   2      
 240   2          }
 241   1          else {
 242   2              bError = TRUE;
 243   2              printf ( "No Ack from configuration EEPROM, use API to init RX\n");
 244   2      
 245   2          }
 246   1          return bError;
 247   1      
 248   1      }
 249          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    985    ----
   CONSTANT SIZE    =    376    ----
   XDATA SIZE       =   ----      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
