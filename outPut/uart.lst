C51 COMPILER V9.00   UART                                                                  07/31/2013 09:42:59 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\outPut\uart.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE bsp\uart.c LARGE BROWSE INCDIR(.\app;.\bsp;.\sii9135) DEBUG OBJECTEXTEND PR
                    -INT(.\outPut\uart.lst) TABS(2) PREPRINT(.\outPut\uart.i) OBJECT(.\outPut\uart.obj)

line level    source

   1          #include "uart.h"
   2          #include "reg52.h"
   3          #include "string.h"
   4          #include "IO.h"
   5          
   6          
   7          #ifndef COM_TXBUFF_LEN
   8          #define COM_TXBUFF_LEN    14       //发送缓冲长度
   9          #endif
  10          
  11          #ifndef COM_RXBUFF_LEN  
  12          #define COM_RXBUFF_LEN    140      //接收缓冲长度
  13          #endif
  14          
  15          /*定义串口接收和发送数据指针结构体*/
  16           struct comBuffCtrl{
  17             unsigned char rxHead;  //head指向可以读的位置;pop操作, Head+1
  18             unsigned char rxTail;  //tail指向可以写的位置;Push操作,Tail+1
  19             
  20             unsigned char txHead;
  21             unsigned char txTail;   
  22          };
  23          
  24          struct comBuffCtrl  uart0Ctl;
  25          
  26          unsigned char uart0TxBusy = 0;
  27          
  28           unsigned char uart0RxBuff[COM_RXBUFF_LEN];         //通讯串口接收缓冲区
  29           unsigned char uart0TxBuff[COM_TXBUFF_LEN];         //通讯串口发送缓冲区
  30          
  31          
  32          void setRS485( uchar k )
  33          {
  34   1         RS485TxEN = k;
  35   1      }
  36          
  37          /******Initial the RX Buffer*******/
  38          void memoryInit(void)
  39          {   
  40   1        memset( uart0RxBuff,0,sizeof(uart0RxBuff) );
  41   1      }
  42          
  43          /******Send a byte*****/
  44          void sendByte(uchar sendData)
  45          {
  46   1      //   setRS485( TX_EN );  //enable rs485 tx 
  47   1        
  48   1         SBUF = sendData;
  49   1         while(TI == 0);
  50   1         TI = 0;  
  51   1        
  52   1      //   setRS485( RX_EN );  //enable rs485 rx 
  53   1      }
  54          
C51 COMPILER V9.00   UART                                                                  07/31/2013 09:42:59 PAGE 2   

  55          /******Send a string*****/
  56          void SendString(uchar *s)
  57          {
  58   1        while(*s)
  59   1        {
  60   2         sendByte(*s++);
  61   2         //s++;
  62   2        }
  63   1      }
  64          
  65          /**************************************************
  66          *  串口中断处理
  67          ***************************************************/
  68          usart(void) interrupt 4  
  69          {
  70   1        //unsigned char tmpChar;
  71   1        unsigned char tmpId;
  72   1        unsigned char tmpRec;
  73   1        if(RI)  //接收数据中断  数据进队列
  74   1          {
  75   2            
  76   2            RI=0;
  77   2            //tmpChar = SBUF; //featch data
  78   2            tmpId   = uart0Ctl.rxTail;
  79   2            tmpRec  = (tmpId+1)%COM_RXBUFF_LEN; //tail指针+1,若在环尾则会指向0
  80   2            if(uart0Ctl.rxHead != tmpRec)       //if buffer is not full
  81   2             {
  82   3               uart0RxBuff[tmpId] = SBUF;       //put data in rx buffer
  83   3               uart0Ctl.rxTail    = tmpRec;     //rxTail +1
  84   3              // sendByte( SBUF );
  85   3      //           SBUF = SBUF;
  86   3      //           while(TI == 0);
  87   3      //           TI = 0; 
  88   3             }
  89   2      //       TL0 = 0xF7;    
  90   2      //       TH0 = 0xFF;   //10uS      
  91   2          }
  92   1      //  if(TI)  //complete send one byte
  93   1      //    {
  94   1      //      TI=0;  //sw clear
  95   1      //      //uart0BegainSend(); //go on sending
  96   1      //    }
  97   1      }
  98          /*
  99          **********************************************************************
 100          *                             UART0发送程序
 101          *
 102          * Descriptoion :UART0字符发送函数,当SBUF为空时,第一个字符
 103                          发送由应用程序调用发送,之后由中断ISR自动调用
 104          * Arguments    :none
 105          * Return       :none
 106          * Note         :should consider the re-entry of function,please check
 107                          uart0TxBusy,which must be clear in interrupt ISR
 108          **********************************************************************
 109          */
 110          void uart0BegainSend(void)
 111          {
 112   1         unsigned char tmpId;
 113   1         tmpId = uart0Ctl.txHead;
 114   1         if(uart0Ctl.txTail == tmpId)//buffer is empty!  data in tx buffer is send completly
 115   1         {
 116   2            uart0TxBusy = 0;         //send complete,bus is idle
C51 COMPILER V9.00   UART                                                                  07/31/2013 09:42:59 PAGE 3   

 117   2         }
 118   1         else
 119   1         {
 120   2            uart0Ctl.txHead = (tmpId+1) % COM_TXBUFF_LEN;    //txHead+1
 121   2            SBUF = uart0TxBuff[tmpId];                        //featch data to setialPort data buffer SBUF
 122   2            while(TI == 0);
 123   2           
 124   2            if(uart0Ctl.txHead == uart0Ctl.txTail)            //if buffer empety!
 125   2              return;
 126   2            else uart0TxBusy = 1;                             //bus busy
 127   2         }   
 128   1      }
 129          /*
 130          **********************************************************************
 131          *                             put data to RX Buffer
 132          *
 133          * Descriptoion :put data to uart0 buffer,also send data
 134                          
 135          * Arguments    :data to  be send
 136          * Return       :1-->success; 0-->buffer is full
 137          * Note         :should consider the re-entry of function,please check
 138                          uart0TxBusy,which must be clear in interrupt ISR
 139          **********************************************************************
 140          */
 141          unsigned char Com0Putch(unsigned char txChar)
 142          { 
 143   1         unsigned char tmpTail;    
 144   1         //进队列程序
 145   1         tmpTail = (uart0Ctl.txTail+1)%COM_TXBUFF_LEN;
 146   1         if(tmpTail == uart0Ctl.txHead)              //Tail+1 = Head, buffer is full
 147   1           return 0;                                  
 148   1         uart0TxBuff[uart0Ctl.txTail] = txChar;    //buffer is not full
 149   1         uart0Ctl.txTail = tmpTail;                //buffer head +1 
 150   1         
 151   1         return 1;
 152   1         if(uart0TxBusy == 0)
 153   1           uart0BegainSend();
 154   1         //return 1;
 155   1      }
 156          /*
 157          ******************************************************************
 158          *                   send string to tx buffer
 159          * Description: put string to uart0  tx buffer
 160          * Arguement  : the pointer of the string!
 161          * Return     : none
 162          * Note       : none
 163          ******************************************************************
 164          */
 165          // void com0SendStr(unsigned char *pStr)
 166          // {
 167          //   unsigned char txChar;
 168          //  
 169          //   while(1)
 170          //   {
 171          //      txChar = *pStr++;
 172          //      if(txChar == 0) break; //quit while(1)
 173          //        while(0 == Com0Putch(txChar));    
 174          //    }
 175          // }
 176          /*********************************************************************************************************
             -*
 177                                                通讯串口接收数据检测
C51 COMPILER V9.00   UART                                                                  07/31/2013 09:42:59 PAGE 4   

 178          *
 179          * Description: 此函数仅检测有无数据，具体读取由com0GetChar函数执行
 180          *
 181          * Arguments  : none
 182          *
 183          * Returns    0:无数据 1:有数据
 184          *
 185          **********************************************************************************************************
             -/
 186          unsigned char com0CheckRx(void)
 187          {
 188   1          if( uart0Ctl.rxHead != uart0Ctl.rxTail ) return 1; 
 189   1      
 190   1          return 0;
 191   1      }
 192          /*********************************************************************************************************
             -*
 193                                                从uart0中读取一个数据
 194          *
 195          * Description: 只有当串口中有数据时才可调用本函数
 196          *
 197          * Arguments  : none
 198          *
 199          * Returns    : 读取的数据
 200          *
 201          **********************************************************************************************************
             -/
 202          unsigned char com0GetChar(void)
 203          {
 204   1          unsigned char rtnChar;
 205   1      
 206   1          rtnChar = uart0RxBuff[ uart0Ctl.rxHead ];
 207   1          uart0Ctl.rxHead = (uart0Ctl.rxHead + 1) % COM_RXBUFF_LEN;
 208   1          return rtnChar;
 209   1      }
 210          
 211          
 212          void urInit(void)   //19200bps@11.0592MHz
 213          {
 214   1        
 215   1        PCON &= 0x7F;     //波特率不倍速 PCON.7[SMOD]=0
 216   1        SCON =  0x50;     //8位数据,可变波特率
 217   1        AUXR |= 0x40;     //定时器1时钟为Fosc,即1T
 218   1        AUXR &= 0xFE;     //串口1选择定时器1为波特率发生器
 219   1        TMOD &= 0x0F;     //清除定时器1模式位 不改变timer0的设置
 220   1        
 221   1        TMOD |= 0x20;     //设定定时器1为8位自动重装方式
 222   1        TL1 =   0xee;     //设定定时初值
 223   1        TH1 =   0xee;     //设定定时器重装值
 224   1        ET1 =   0;        //禁止定时器1中断
 225   1        TR1 =   1;        //启动定时器1
 226   1      
 227   1        ES = 1;           //允许串口1中断
 228   1        EA = 1;
 229   1        memoryInit();
 230   1        
 231   1      //  RS0 = 0;
 232   1      //  RS1 = 0;          //@PSW 选择工作寄存器组0
 233   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.00   UART                                                                  07/31/2013 09:42:59 PAGE 5   

   CODE SIZE        =    392    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    159       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
