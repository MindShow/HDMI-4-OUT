C51 COMPILER V9.51   SIIHLVIIC                                                             05/29/2013 17:36:11 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SIIHLVIIC
OBJECT MODULE PLACED IN .\outPut\SiIHLVIIC.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE sii9135\SiIHLVIIC.c LARGE BROWSE INCDIR(.\app;.\bsp;.\sii9135) DEBUG OBJECT
                    -EXTEND PRINT(.\outPut\SiIHLVIIC.lst) TABS(2) PREPRINT(.\outPut\SiIHLVIIC.i) OBJECT(.\outPut\SiIHLVIIC.obj)

line level    source

   1          //------------------------------------------------------------------------------
   2          // Module Name: SiIHLVIIC
   3          //
   4          // Module Description:  high level i2c routines
   5          //
   6          // Copyright © 2002-2005, Silicon Image, Inc.  All rights reserved.
   7          //
   8          // No part of this work may be reproduced, modified, distributed, transmitted,
   9          // transcribed, or translated into any language or computer format, in any form
  10          // or by any means without written permission of: Silicon Image, Inc.,
  11          // 1060 East Arques Avenue, Sunnyvale, California 94085
  12          //------------------------------------------------------------------------------
  13          #include "SiIHLVIIC.h"
  14          #include "SiISW_IIC.h"
  15          #include "SiIIICDefs.h"
  16          #include "SiIHAL.h"
  17          
  18          
  19          //------------------------------------------------------------------------
  20          BOOL hlWaitForAck( BYTE bSlvAddr, WORD wTimeOut ){
  21   1      BYTE bError;
  22   1      BOOL qResult = FALSE;
  23   1      
  24   1          do {
  25   2      
  26   2              bError = I2CSendAddr( bSlvAddr, WRITE );
  27   2              I2CSendStop();
  28   2      
  29   2              if ( !bError ){
  30   3                  qResult = TRUE;
  31   3                  break;
  32   3              }
  33   2              halDelayMS( 1 );
  34   2          } while ( wTimeOut-- );
  35   1          return qResult;
  36   1      }
  37          
  38          
  39          //------------------------------------------------------------------------------------
  40          BYTE hlBlockRead_8BAS( I2CShortCommandType * IIC, BYTE * Data ) {
  41   1      BYTE i, bState;
  42   1      
  43   1              if(!(IIC->Flags & FLG_CONTD)) {
  44   2                  bState = GetI2CState();
  45   2                  if(bState){
  46   3                      return IIC_CAPTURED;
  47   3                  }
  48   2                  bState = I2CSendAddr(IIC->SlaveAddr,WRITE);
  49   2                  if(bState){
  50   3                      I2CSendStop();
  51   3                      return IIC_NOACK;
  52   3                  }
  53   2                  bState = I2CSendByte(IIC->RegAddrL);
  54   2                  if(bState) {
C51 COMPILER V9.51   SIIHLVIIC                                                             05/29/2013 17:36:11 PAGE 2   

  55   3                      I2CSendStop();
  56   3                      return IIC_NOACK;
  57   3                  }
  58   2                  bState = I2CSendAddr (IIC->SlaveAddr,READ);
  59   2                  if(bState) {
  60   3                      I2CSendStop();
  61   3                      return IIC_NOACK;
  62   3                  }
  63   2              }
  64   1              for (i = 0; i < IIC->NBytes - 1; i++)
  65   1                  Data[i] = I2CGetByte();
  66   1              if(IIC->Flags & FLG_NOSTOP) {
  67   2                  Data[i] = I2CGetByte();
  68   2              }
  69   1              else {
  70   2                  Data[i] = I2CGetLastByte();
  71   2                  I2CSendStop();
  72   2              }
  73   1              return IIC_OK;
  74   1      
  75   1      }
  76          
  77          //------------------------------------------------------------------------------------
  78          
  79          BYTE hlBlockWrite_8BAS( I2CShortCommandType * IIC, BYTE * Data ){
  80   1      BYTE i, bState;
  81   1      
  82   1              if(!(IIC->Flags & FLG_CONTD)) {
  83   2                  bState = GetI2CState();
  84   2                  if( bState )
  85   2                      return IIC_CAPTURED;
  86   2                  bState = I2CSendAddr(IIC->SlaveAddr,WRITE);
  87   2                  if( bState ){
  88   3                      I2CSendStop();
  89   3                      return IIC_NOACK;
  90   3                  }
  91   2                  bState = I2CSendByte(IIC->RegAddrL);
  92   2                  if(bState){
  93   3                      I2CSendStop();
  94   3                      return IIC_NOACK;
  95   3                  }
  96   2              }
  97   1              for (i=0; i<IIC->NBytes; i++)
  98   1                  I2CSendByte(Data[i]);
  99   1              if(!(IIC->Flags & FLG_NOSTOP))
 100   1                  I2CSendStop();
 101   1              return 0;
 102   1      
 103   1      }
 104          //-------------------------------------------------------------------
 105          BYTE hlReadByte_8BA ( BYTE SlaveAddr, BYTE RegAddr ){
 106   1      BYTE Data;
 107   1      
 108   1              I2CSendAddr(SlaveAddr,WRITE);
 109   1              I2CSendByte(RegAddr);
 110   1      
 111   1              I2CSendAddr (SlaveAddr,READ);
 112   1              Data = I2CGetLastByte();
 113   1              I2CSendStop();
 114   1              return Data;
 115   1      }
 116          
C51 COMPILER V9.51   SIIHLVIIC                                                             05/29/2013 17:36:11 PAGE 3   

 117          //--------------------------------------------------------------------
 118          
 119          WORD hlReadWord_8BA( BYTE SlaveAddr, BYTE RegAddr ) {
 120   1      WORD Data;
 121   1      
 122   1              I2CSendAddr( SlaveAddr, WRITE );
 123   1              I2CSendByte( RegAddr++);
 124   1      
 125   1              I2CSendAddr (SlaveAddr, READ );
 126   1              Data = I2CGetByte();
 127   1              Data |= (I2CGetLastByte() << 8 );
 128   1              I2CSendStop();
 129   1              return Data;
 130   1      }
 131          
 132          
 133          //-------------------------------------------------------------------
 134          void hlWriteByte_8BA ( BYTE SlaveAddr, BYTE RegAddr, BYTE Data ) {
 135   1      
 136   1              I2CSendAddr(SlaveAddr,WRITE);
 137   1              I2CSendByte(RegAddr);
 138   1              I2CSendByte(Data);
 139   1              I2CSendStop();
 140   1      
 141   1      }
 142          //-------------------------------------------------------------------
 143          
 144          void hlWriteWord_8BA( BYTE SlaveAddr, BYTE RegAddr, WORD Data ){
 145   1      
 146   1              I2CSendAddr(SlaveAddr,WRITE);
 147   1              I2CSendByte(RegAddr);
 148   1              I2CSendByte(Data & 0xff);
 149   1              I2CSendByte(Data >> 8);
 150   1              I2CSendStop();
 151   1      
 152   1      }
 153          
 154          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    726    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
