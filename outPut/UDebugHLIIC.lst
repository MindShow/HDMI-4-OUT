C51 COMPILER V9.51   UDEBUGHLIIC                                                           05/29/2013 17:36:17 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE UDEBUGHLIIC
OBJECT MODULE PLACED IN .\outPut\UDebugHLIIC.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE sii9135\UDebugHLIIC.c LARGE BROWSE INCDIR(.\app;.\bsp;.\sii9135) DEBUG OBJE
                    -CTEXTEND PRINT(.\outPut\UDebugHLIIC.lst) TABS(2) PREPRINT(.\outPut\UDebugHLIIC.i) OBJECT(.\outPut\UDebugHLIIC.obj)

line level    source

   1          //------------------------------------------------------------------------------
   2          // Module Name: UDebugHLIIC
   3          //
   4          // Module Description: contains IIC functions which used outside of API
   5          //
   6          // Copyright © 2002-2005, Silicon Image, Inc.  All rights reserved.
   7          //
   8          // No part of this work may be reproduced, modified, distributed, transmitted,
   9          // transcribed, or translated into any language or computer format, in any form
  10          // or by any means without written permission of: Silicon Image, Inc.,
  11          // 1060 East Arques Avenue, Sunnyvale, California 94085
  12          //------------------------------------------------------------------------------
  13          #include "UDebugHLIIC.h"
  14          #include "SiISW_IIC.h"
  15          #include "SiIIICDefs.h"
  16          #include "SiIHAL.h"
  17          
  18          //------------------------------------------------------------------------------------
  19          #ifdef _BIGEEPROM_
  20          
  21          BYTE BlockWrite_16BA( I2CCommandType * I2CCommand ){
  22   1      BYTE i, bState;
  23   1      
  24   1      
  25   1              if(!(I2CCommand->Flags & FLG_CONTD)) {
  26   2                  bState = GetI2CState();
  27   2                  if(bState)
  28   2                      return IIC_CAPTURED;
  29   2                  bState = I2CSendAddr(I2CCommand->SlaveAddr,WRITE);
  30   2                  if(bState){
  31   3                      I2CSendStop();
  32   3                      return IIC_NOACK;
  33   3                  }
  34   2                  I2CSendByte(I2CCommand->RegAddrH);
  35   2                  I2CSendByte(I2CCommand->RegAddrL);
  36   2              }
  37   1              for ( i = 0; i < I2CCommand->NBytes; i++ ){
  38   2                  I2CSendByte((BYTE)(I2CCommand->Data[i]));
  39   2                  I2CCommand->RegAddrL++;
  40   2                  if( !I2CCommand->RegAddrL ){
  41   3                      I2CCommand->RegAddrH++;
  42   3                      if( ( I2CCommand->RegAddrL & ALIGN24C264 ) == 0 ){
  43   4                          I2CSendStop();
  44   4                          I2CSendAddr(I2CCommand->SlaveAddr,WRITE);
  45   4                          I2CSendByte(I2CCommand->RegAddrH);
  46   4                          I2CSendByte(I2CCommand->RegAddrL);
  47   4                      }
  48   3                  }
  49   2              }
  50   1              if(!(I2CCommand->Flags & FLG_NOSTOP))
  51   1                  I2CSendStop();
  52   1      
  53   1              return IIC_OK;
  54   1      
C51 COMPILER V9.51   UDEBUGHLIIC                                                           05/29/2013 17:36:17 PAGE 2   

  55   1      }
  56          //------------------------------------------------------------------------------------
  57          BYTE BlockRead_16BA( I2CCommandType * I2CCommand ) {
  58   1      BYTE i, bState;
  59   1      
  60   1      
  61   1              if (!(I2CCommand->Flags & FLG_CONTD)) {
  62   2                  bState = GetI2CState();
  63   2                  if ( bState )
  64   2                      return IIC_CAPTURED;
  65   2                  bState = I2CSendAddr(I2CCommand->SlaveAddr,WRITE);
  66   2                  if ( bState ) {
  67   3                      I2CSendStop();
  68   3                      return IIC_NOACK;
  69   3                  }
  70   2                  I2CSendByte(I2CCommand->RegAddrH);
  71   2                  I2CSendByte(I2CCommand->RegAddrL);
  72   2                  I2CSendStop();
  73   2              }
  74   1              I2CSendAddr (I2CCommand->SlaveAddr, READ);
  75   1              for ( i = 0; i < I2CCommand->NBytes-1; i++ )
  76   1                  I2CCommand->Data[i]  = I2CGetByte();
  77   1              if ( I2CCommand->Flags & FLG_NOSTOP ) {
  78   2                  I2CCommand->Data[i] = I2CGetByte();
  79   2              }
  80   1              else {
  81   2                  I2CCommand->Data[i] = I2CGetLastByte();
  82   2                  I2CSendStop();
  83   2              }
  84   1              return IIC_OK;
  85   1      
  86   1      }
  87          
  88          //------------------------------------------------------------------------------------
  89          
  90          
  91          BYTE BlockRead_16BAS ( I2CShortCommandType * IIC, BYTE * Data ) {
  92   1      BYTE i, bState;
  93   1      
  94   1      
  95   1      
  96   1              if( !( IIC->Flags & FLG_CONTD ) ) {
  97   2                  bState = GetI2CState();
  98   2                  if ( bState ){
  99   3                      return IIC_CAPTURED;
 100   3                  }
 101   2                  bState = I2CSendAddr(IIC->SlaveAddr,WRITE);
 102   2                  if( bState ) {
 103   3                      I2CSendStop();
 104   3                      return IIC_NOACK;
 105   3                  }
 106   2                  bState = I2CSendByte(IIC->RegAddrH);
 107   2                  if( bState ) {
 108   3                      I2CSendStop();
 109   3                      return IIC_NOACK;
 110   3                  }
 111   2                  I2CSendByte(IIC->RegAddrL);
 112   2                  bState = I2CSendAddr (IIC->SlaveAddr,READ);
 113   2                  if ( bState ) {
 114   3                      I2CSendStop();
 115   3                      return IIC_NOACK;
 116   3                  }
C51 COMPILER V9.51   UDEBUGHLIIC                                                           05/29/2013 17:36:17 PAGE 3   

 117   2              }
 118   1              for ( i = 0; i < IIC->NBytes - 1; i++ )
 119   1                  Data[i] = I2CGetByte();
 120   1              if ( IIC->Flags & FLG_NOSTOP ) {
 121   2                  Data[i] = I2CGetByte();
 122   2              }
 123   1              else {
 124   2                  Data[i] = I2CGetLastByte();
 125   2                  I2CSendStop();
 126   2              }
 127   1              return IIC_OK;
 128   1      
 129   1      
 130   1      }
 131          
 132          //------------------------------------------------------------------------------------
 133          
 134          
 135          BYTE BlockWrite_16BAS( I2CShortCommandType * IIC, BYTE * Data ){
 136   1      BYTE i, bState;
 137   1      
 138   1      
 139   1              if ( !(IIC->Flags & FLG_CONTD)) {
 140   2                  bState = GetI2CState();
 141   2                  if( bState )
 142   2                      return IIC_CAPTURED;
 143   2                  bState = I2CSendAddr(IIC->SlaveAddr,WRITE);
 144   2                  if( bState ){
 145   3                      I2CSendStop();
 146   3                      return IIC_NOACK;
 147   3                  }
 148   2                  bState = I2CSendByte(IIC->RegAddrH);
 149   2                  if( bState ){
 150   3                      I2CSendStop();
 151   3                      return IIC_NOACK;
 152   3                  }
 153   2                  I2CSendByte(IIC->RegAddrL);
 154   2              }
 155   1              for ( i = 0; i < IIC->NBytes; i++ )
 156   1                  I2CSendByte(Data[i]);
 157   1              if ( !( IIC->Flags & FLG_NOSTOP ) )
 158   1                  I2CSendStop();
 159   1              return IIC_OK;
 160   1      
 161   1      }
 162          
 163          #ifdef _DEAD_CODE_
              //------------------------------------------------------------------------
              void WriteWord_16BA( BYTE SlaveAddr, WORD RegAddr, WORD Data ) {
              
              
                      I2CSendAddr(SlaveAddr,WRITE);
                      I2CSendByte((BYTE)(RegAddr>>8));
                      I2CSendByte((BYTE)(RegAddr&0xFF));
                      I2CSendByte((BYTE)(Data&0xFF));
                      I2CSendByte((BYTE)(Data>>8));
                      I2CSendStop();
              
              }
              
              
              //------------------------------------------------------------------------
C51 COMPILER V9.51   UDEBUGHLIIC                                                           05/29/2013 17:36:17 PAGE 4   

              void WriteByte_16BA( BYTE SlaveAddr, WORD RegAddr, BYTE Data ) {
              
              
                      I2CSendAddr(SlaveAddr,WRITE);
                      I2CSendByte((BYTE)(RegAddr>>8));
                      I2CSendByte((BYTE)(RegAddr&0xFF));
                      I2CSendByte(Data);
                      I2CSendStop();
              
              }
              
              //-------------------------------------------------------------------
              WORD ReadWord_16BA( BYTE SlaveAddr, WORD RegAddr ){
              WORD Data;
              
              
                      I2CSendAddr(SlaveAddr,WRITE);
                      I2CSendByte((BYTE)RegAddr>>8);
                      I2CSendByte((BYTE)(RegAddr & 0xff));
                      I2CSendStop();
                      I2CSendAddr (SlaveAddr,READ);
                      Data = I2CGetByte();
                      Data |= (I2CGetLastByte()<<8);
                      I2CSendStop();
                      return Data;
              
              }
              
              //-------------------------------------------------------------------
              BYTE ReadByte_16BA( BYTE SlaveAddr, WORD RegAddr){
              BYTE Data;
              
              
                      I2CSendAddr(SlaveAddr,WRITE);
                      I2CSendByte((BYTE)RegAddr>>8);
                      I2CSendByte((BYTE)(RegAddr & 0xff));
                      I2CSendStop();
                      I2CSendAddr (SlaveAddr,READ);
                      Data = I2CGetLastByte();
                      I2CSendStop();
                      return Data;
              
              }
              #endif
 223          
 224          #endif //  _end BIGEEPROM_
 225          //------------------------------------------------------------------------------------
 226          BYTE BlockRead_8BA ( I2CCommandType * I2CCommand ){
 227   1      BYTE i, bState;
 228   1      
 229   1      
 230   1              if(!(I2CCommand->Flags & FLG_CONTD)) {
 231   2                  bState = GetI2CState();
 232   2                  if(bState){
 233   3                      return IIC_CAPTURED;
 234   3                  }
 235   2                  bState = I2CSendAddr(I2CCommand->SlaveAddr,WRITE);
 236   2                  if(bState){
 237   3                      I2CSendStop();
 238   3                      return IIC_NOACK;
 239   3                  }
 240   2                  bState = I2CSendByte(I2CCommand->RegAddrL);
C51 COMPILER V9.51   UDEBUGHLIIC                                                           05/29/2013 17:36:17 PAGE 5   

 241   2                  if ( bState ) {
 242   3                      I2CSendStop();
 243   3                      return IIC_NOACK;
 244   3                  }
 245   2                  bState = I2CSendAddr (I2CCommand->SlaveAddr,READ);
 246   2                  if ( bState ) {
 247   3                      I2CSendStop();
 248   3                      return IIC_NOACK;
 249   3                  }
 250   2              }
 251   1              for ( i = 0; i < I2CCommand->NBytes-1; i++)
 252   1                  I2CCommand->Data[i] = I2CGetByte();
 253   1              if( I2CCommand->Flags & FLG_NOSTOP ) {
 254   2                  I2CCommand->Data[i] = I2CGetByte();
 255   2              }
 256   1              else {
 257   2                  I2CCommand->Data[i] = I2CGetLastByte();
 258   2                  I2CSendStop();
 259   2              }
 260   1              return IIC_OK;
 261   1      
 262   1      }
 263          
 264          //------------------------------------------------------------------------------------
 265          BYTE BlockWrite_8BA( I2CCommandType * I2CCommand ) {
 266   1      BYTE i, bState;
 267   1      
 268   1      
 269   1              if ( !( I2CCommand->Flags & FLG_CONTD ) ) {
 270   2                  bState = GetI2CState();
 271   2                  if(bState)
 272   2                      return IIC_CAPTURED;
 273   2                  bState = I2CSendAddr(I2CCommand->SlaveAddr,WRITE);
 274   2                  if(bState){
 275   3                      I2CSendStop();
 276   3                      return IIC_NOACK;
 277   3                  }
 278   2                  bState = I2CSendByte(I2CCommand->RegAddrL);
 279   2                  if(bState){
 280   3                      I2CSendStop();
 281   3                      return IIC_NOACK;
 282   3                  }
 283   2              }
 284   1              for ( i = 0; i < I2CCommand->NBytes; i++ )
 285   1                  I2CSendByte(I2CCommand->Data[i]);
 286   1              if( !( I2CCommand->Flags & FLG_NOSTOP ) )
 287   1                  I2CSendStop();
 288   1              return IIC_OK;
 289   1      
 290   1      }
 291          //-------------------------------------------------------------------------------------
 292          BYTE DoRecoverySCLs( void ) {
 293   1      
 294   1      
 295   1              MakeSCLPulses( 9 );
 296   1              return GetI2CStatus();
 297   1      
 298   1      }
 299          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.51   UDEBUGHLIIC                                                           05/29/2013 17:36:17 PAGE 6   

   CODE SIZE        =   1624    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      34
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
